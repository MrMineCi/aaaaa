import pandas as pd
from transformers import pipeline

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Zero-shot Classification
classifier = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
df = pd.read_csv("responses.csv")

# ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
labels = ["communication", "decision making", "leadership", "problem solving", "teamwork"]

# ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
def analyze_response(response):
    result = classifier(response, candidate_labels=labels)
    return result  # ‡∏Ñ‡∏∑‡∏ô dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ labels ‡πÅ‡∏•‡∏∞ scores

# ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
df['Communication_Analysis'] = df['‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡∏¥‡∏Å‡∏§‡∏ï'].apply(analyze_response)
df['DecisionMaking_Analysis'] = df['‡πÄ‡∏•‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å‡∏•‡∏≥‡∏ö‡∏≤‡∏Å'].apply(analyze_response)
df['ProblemSolving_Analysis'] = df['‡πÄ‡∏•‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏ö‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô'].apply(analyze_response)
df['SkillToImprove_Analysis'] = df['‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°?'].apply(analyze_response)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
def calculate_skill_percentage(analysis):
    skills = {label: 0 for label in labels}
    for label, score in zip(analysis['labels'], analysis['scores']):
        skills[label] += score
    total_score = sum(skills.values())
    return {skill: (score / total_score) * 100 for skill, score in skills.items()}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏à‡∏≤‡∏Å 4 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
def average_skills_from_row(row):
    skill_totals = {label: 0 for label in labels}
    count = 0
    for col in ['Communication_Analysis', 'DecisionMaking_Analysis', 'ProblemSolving_Analysis', 'SkillToImprove_Analysis']:
        percentage = calculate_skill_percentage(row[col])
        for skill, score in percentage.items():
            skill_totals[skill] += score
        count += 1
    return {skill: score / count for skill, score in skill_totals.items()}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤
def suggest_development(avg_skills):
    sorted_skills = sorted(avg_skills.items(), key=lambda x: x[1])
    weakest_skills = [skill for skill, score in sorted_skills[:2]]
    return f"‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {', '.join(weakest_skills)} ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"

# ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
for index, row in df.iterrows():
    print(f"\n‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö']}:")

    for col in ['Communication_Analysis', 'DecisionMaking_Analysis', 'ProblemSolving_Analysis', 'SkillToImprove_Analysis']:
        percentage = calculate_skill_percentage(row[col])
        print(f"\n\t‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {col}:")
        for skill, score in sorted(percentage.items(), key=lambda x: x[1], reverse=True):
            print(f"\t\t{skill}: {score:.2f}%")

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    avg_skills = average_skills_from_row(row)
    print(f"\n\t‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:")
    for skill, avg in sorted(avg_skills.items(), key=lambda x: x[1], reverse=True):
        print(f"\t\t{skill}: {avg:.2f}%")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    suggestion = suggest_development(avg_skills)
    print(f"\n\tüìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI: {suggestion}")
    print("-" * 50)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á DataFrame ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ export
    df.at[index, 'Suggestion'] = suggestion
